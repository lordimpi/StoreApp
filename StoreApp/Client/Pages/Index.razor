@page "/"
@inject HttpClient ClientHttp
@inject NotificationService NotificationService

<div class="container-fluid">
    <div class="row justify-content-between">
        <div class="col-6"><h1>Welcome to my Store!</h1></div>
        <div class="col-1">
            <RadzenButton Click="ProductsCart" Icon="shopping_cart" Style="margin-bottom: 20px; width: 80px"
                          ButtonStyle="ButtonStyle.Secondary"></RadzenButton>
        </div>
    </div>
    <hr />
    <div class="card-columns">
        @foreach (var item in Products)
        {
            <div class="col mb-4">
                <div class="card text-white bg-dark" style="width:350px">
                    <img class="card-img-top"
                         src="/@item.RutaImagen" alt="@item.Nombre"
                         style="width: 100%; cursor: pointer " @onclick="@(()=> ShowModal(item))">
                    <div class="card-body">
                        <p class="card-title"><b>$ @item.Precio.PrecioVenta</b></p>
                        <p class="card-text">@item.Nombre</p>
                        <button @onclick="AddProductToCar" class="btn btn-success">Add to cart</button>
                    </div>
                </div>
            </div>
        }
    </div>

</div>
@if (LayerVisible)
{
    <ProductDetails Product="LayerProduct" OnCancel="DialogCancel" OnAdding="AddProductToCar"></ProductDetails>
}
@if (KeepBuying)
{
    <CartProducts SelectedProducts="SelectedProducs" OnKeepBuying="DialogCancel"></CartProducts>
}

@code
{
    List<Product> Products = new List<Product>();
    bool LayerVisible;
    bool KeepBuying;
    Product LayerProduct;
    List<Product> SelectedProducs = new List<Product>();
    protected async override Task OnInitializedAsync()
    {
        Products = await ClientHttp.GetFromJsonAsync<List<Product>>("api/ListProducts");
    }

    private void ProductsCart()
    {
        KeepBuying = true;
    }

    private void ShowModal(Product product)
    {
        LayerProduct = product;
        LayerVisible = true;
    }

    private void DialogCancel()
    {
        LayerVisible = false;
        KeepBuying = false;
    }

    private void AddProductToCar()
    {
        Product product = LayerProduct;
        SelectedProducs.Add(product);
        LayerVisible = false;
        ShowNotification(new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = "Success Summary",
            Detail = "Product adding to car",
            Duration = 2000
        });
        // When you need delet item before to add sale car, use this line
        //Products.Remove(product);
    }

    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}