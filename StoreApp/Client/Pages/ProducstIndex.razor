@page "/Product/Index"
@inject DialogService DialogService
@implements IDisposable
@inject HttpClient ClientHttp
@inject NotificationService NotificationService

<div class="container-fluid">
    <h1>Products</h1>
    <hr />
    <p>
        <button @onclick="@(()=>ShowModal(new Product()))" class="btn btn-primary">Add New <span class="oi oi-plus"></span></button>
    </p>

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" @ref="GridProducts"
                    FilterMode="FilterMode.Simple" PageSize="4" AllowPaging="true" AllowSorting="true" Data="@Products" TItem="Product"
                    ColumnWidth="200px" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">

        <Columns>
            <RadzenDataGridColumn TItem="Product" Property="Id" Filterable="false" Title="ID" Width="50px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="Product" Title="RutaImagen" Sortable="false" Filterable="false" Width="200px" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <RadzenImage Path="@data.RutaImagen" style="width:100px;height:100px;max-width: 100%; height: auto;" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Product" Property="Nombre" Title="Nombre" />
            <RadzenDataGridColumn TItem="Product" Property="Descripcion" Title="Descripcion" Width="200px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="Product" Property="Precio.PrecioVenta" Title="Precio" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="Product" Property="FechaAlta" Title="Fecha de creacion" FormatString="{0:d}" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="Product" Property="FechaBaja" Title="Fecha de baja" FormatString="{0:d}" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="Product" Sortable="false" Filterable="false" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <button class="btn btn-md btn-warning" @onclick="@(()=>ShowModal(data))"><span class="oi oi-pencil"></span></button>
                    <button class="btn btn-md btn-danger" @onclick="@(()=>DeleteProduct(data))"><span class="oi oi-trash"></span></button>
                </Template>
            </RadzenDataGridColumn>

        </Columns>

    </RadzenDataGrid>

</div>

@if (LayerVisible)
{
    <CreateProduct Product="Product" OnClose="CloseModal" OnSave="(() => SaveRecord(Product))"></CreateProduct>
}
else
{
    if (GridProducts != null)
    {
        GridProducts.Reload();
    }
}

@code
{
    IEnumerable<Product> Products = new List<Product>();
    RadzenDataGrid<Product> GridProducts;
    bool LayerVisible;
    Product Product;

    protected async override Task OnInitializedAsync()
    {
        Products = await ClientHttp.GetFromJsonAsync<List<Product>>("api/ListProducts");
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
    }

    void Close(dynamic result)
    {
        Console.WriteLine($"Dialog closed");
    }

    private async Task DeleteProduct(Product product)
    {
        if (await DialogService.Confirm("Are you sure delete this record?", "" + product.Nombre, new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" }) == true)
        {
            var response = await ClientHttp.DeleteAsync($"api/DeletProduct/{product.Id}");
            List<Product> lp = Products.ToList();
            lp.Remove(product);
            Products = lp;
            await GridProducts.Reload();
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success Summary",
                Detail = "Product deleted",
                Duration = 2000
            });
            return;
        }
    }

    private async Task ShowCardProduct(Product product)
    {
        var result = await DialogService.OpenAsync("StoreApp", ds =>
    @<div>
        <EditForm Model="@product">
            <CreateProduct Product="product"></CreateProduct>
            <div class="row justify-content-center">
                <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Save" Icon="save" Click="() => ds.Close(product)" Style="margin-bottom: 10px; width: 150px" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(null)" ButtonStyle="ButtonStyle.Secondary"
                                  Icon="cancel" Style="margin-bottom: 10px; width: 150px" />
                </div>
            </div>
        </EditForm>
    </div>,
new DialogOptions() { Width = "800px", Height = "700px" });
        SaveRecord(result);
    }

    private void ShowModal(Product product)
    {
        LayerVisible = true;
        Product = product;
    }

    private void CloseModal()
    {
        LayerVisible = false;
        Product = null;
    }

    private async void SaveRecord(Product p)
    {
        LayerVisible = false;
        if (p != null)
        {
            if (p.Id == 0)
            {
                var response = await ClientHttp.PostAsJsonAsync("api/SaveProduct", p);
                p.Id = await ClientHttp.GetFromJsonAsync<int>("api/GetLastProduct");
                List<Product> lp = Products.ToList();
                lp.Add(p);
                Products = lp;
                await GridProducts.InsertRow(p);
                ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success Summary",
                    Detail = "Product created",
                    Duration = 2000
                });
            }

        }
    }

    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

}
